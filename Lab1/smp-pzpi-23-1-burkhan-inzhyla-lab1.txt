Міністерство освіти та науки України 
Харківський національний університет радіоелектроніки 
Кафедра програмної інженерії 






ЗВІТ З ЛАБОРАТОРНОЇ РОБОТИ №1
з дисципліни «Скриптові мови програмування»



Виконала:                                                                                            
Бурхан Інжила                                                                               
Студентка групи ПЗПІ-23-1   

Перевірив:                                                            
Ст.викл. каф. ПІ
Сокорчук І.П.








Харків — 2025

1 ЛАБОРАТОРНА РОБОТА
1 ІСТОРІЯ ЗМІН	
№ Дата        Версія звіту  Опис змін та виправлень
1 28.05.2025  1.0           Створено звіт

1.2 Завдання до лабораторної роботи
Розробити Bash-скрипт, який обробляє експортований із сайту https://cist.nure.ua/ розклад занять для всіх груп потоку в форматі CSV та перетворює його у формат CSV для завантаження в Google Календар https://support.google.com/.
1.3 Опис виконаної роботи
Розроблено Bash-скрипт, який автоматизує обробку розкладу занять, експортованого з сайту https://cist.nure.ua у форматі CSV. Скрипт призначений для конвертації цього файлу у формат, сумісний із Google Calendar, відповідно до вимог сервісу імпорту подій.
На початку виконується перевірка вхідних параметрів, включаючи наявність файлу, вказану групу та опцію тихого режиму. Якщо кодування файлу відрізняється від UTF-8 (зокрема, WINDOWS-1251), воно автоматично конвертується для коректного читання кириличних символів за допомогою команди iconv -f WINDOWS-1251 -t UTF-8 "$file" [рядок 43, Додаток В].
Далі за допомогою інструментів awk і sed здійснюється попередня обробка CSV-даних: виділення полів, заміна роздільників в середині лапок [рядок 48, Додаток В], формування правильної структури. У випадку, якщо групу не вказано, скрипт автоматично визначає наявні групи в файлі за шаблоном в grep, grep -oE 'ПЗПІ-[0-9]+-[0-9]+' fixed_file.csv [рядок 74, Додаток В], та пропонує користувачу обрати одну з них.
Після цього виконується фільтрація записів за вибраною групою за допомогою awk, конвертація дат і часу у формат, сумісний із Google Calendar, а також формування опису подій. Результат зберігається у новий CSV-файл, назва якого формується автоматично, з використанням  grep [рядок 64, Додаток В] з урахуванням дати розкладу. 
Скрипт завершує роботу очищенням тимчасових файлів і повідомленням про успішне створення фінального документа.

Висновок:
У результаті виконаної роботи було створено Bash-скрипт, що дозволяє автоматизувати процес обробки розкладу занять, експортованого з сайту cist.nure.ua, та перетворити його у формат, сумісний із Google Calendar. Отримано навички використання Bash-скриптів для автоматизації обробки текстових файлів, зокрема CSV-формату та роботи з утилітами командного рядка такими як iconv, awk, sed, grep.

ДОДАТОК А
Відеозапис
Посилання на відеозапис презентації результатів лабораторної роботи  https://youtu.be/yAH8DCg-_cU
Хронологічний опис відеозапису: 
00:00 — Опис обробки запиту ключів
01:05 — Опис обробки відсутності заданого файлу
01:15 — Опис обробки кодування файлу та помилок у ньому
02:52 — Опис створення вихідного файлу
03:27 — Опис обробки знаходження доступних груп, якщо не вказано конкретної
05:05 — Опис створення файлу для імпорту
ДОДАТОК В
Програмний код
1 #!/bin/bash
2 
3 
4 if [[ "$1" == "--help" ]]; then
5     echo "Синтаксис: $0 [--help | --version] [-q|--quiet] <вхідний_csv_файл> [група]"
6     echo ""
7     echo "Опис:"
8     echo "  Скрипт для обробки CSV-розкладу з CIST (NURE) та"
9     echo "  формування файлу, придатного для імпорту в Google Calendar."
10     echo ""
11     echo "Параметри:"
12     echo "  --help        Показати цей текст та завершити виконання"
13     echo "  --version     Вивести версію скрипта"
14     echo "  -q, --quiet   Приглушити виведення в консоль"
15     echo "  група         Назва академічної групи (необов’язково)"
16     echo "  вхідний_csv_файл  Файл розкладу для обробки"
17     exit 0
18 fi
19 
20 if [[ "$1" == "--version" ]]; then
21     echo "Скрипт для експорту розкладу в Google Calendar — версія 1.0"
22     exit 0
23 fi
24 
25 quiet=0
26 if [[ "$1" == "-q" || "$1" == "--quiet" ]]; then
27     quiet=1
28     shift
29 fi
30 
31 file="$1"
32 group="$2"
33 
34 
35 if [[ ! -f "$file" ]]; then
36     echo "ПОМИЛКА: файл '$file' не знайдено!" >&2
37     exit 1
38 fi
39 
40 
41 if ! iconv -f UTF-8 -t UTF-8 "$file" >/dev/null 2>&1; then
42     temp_file=$(mktemp)
43     iconv -f WINDOWS-1251 -t UTF-8 "$file" > "$temp_file"
44     mv "$temp_file" "$file"
45 fi
46 
47 
48 awk -v RS='"' '
49 NR % 2 == 0 {
50     gsub(",", "|", $0);
51     
52     fields[++count] = $0;
53     
54     if (count == 13) {
55         for (i = 1; i <= 13; i++) {
56             printf "\"%s\"%s", fields[i], (i < 13 ? "," : "\n");
57         }
58         count = 0;
59     }
60 }
61 ' "$file" > fixed_file.csv
62 
63 
64 date=$(echo "$file" | grep -oE '[0-9]{2}_[0-9]{2}_20[0-9]{2}')
65 outFile="Google_TimeTable_${date}.csv"
66 
67 > "$outFile"
68 
69 
70 if [[ -z "$group" ]]; then
71     groups=()
72     while IFS= read -r line; do
73         groups+=("$line")
74     done < <(grep -oE 'ПЗПІ-[0-9]+-[0-9]+' fixed_file.csv | sort -u)
75 
76     group_count=${#groups[@]}
77 
78 
79     if [[ "$group_count" -eq 1 ]]; then
80         group="${groups[0]}"
81         echo "Група не вказана, буде оброблено для групи: $group"
82     elif [[ "$group_count" -eq 0 ]]; then
83         echo "ПОМИЛКА: групу не знайдено у файлі '$file'!" >&2
84         exit 1
85     else
86         echo "Група не вказана, доступні групи:"
87         for g in "${groups[@]}"; do
88             echo " - $g"
89         done
90 
91         echo -n "Будь ласка, вкажіть групу! "
92         exit 1
93     fi
94 
95 fi
96 
97 
98 awk -F',' -v group="$group" -v outFile="$outFile" -v quiet="$quiet" '
99 BEGIN {
100     print "Subject,Start Date,Start Time,End Time,Description" > outFile;
101     counter = 1;
102 }
103 {
104     for (i=1; i<=NF; i++) gsub(/"/, "", $i);
105 
106     if ($1 ~ /ПЗПІ-[0-9]+-[0-9]+/ && $1 ~ group) {
107         subject = $1
108         sub(/^ПЗПІ-[0-9]+-[0-9]+ - /, "", subject)
109 
110         desc = $12;
111 
112         split($2, d1, ".");
113         start_date = sprintf("%02d/%02d/%04d", d1[2], d1[1], d1[3]);
114 
115         split($3, t1, ":");
116         split($5, t2, ":");
117 
118         ampm1 = (t1[1] >= 12) ? "PM" : "AM";
119         hour1 = t1[1] % 12; if (hour1 == 0) hour1 = 12;
120         start_time = sprintf("%02d:%02d %s", hour1, t1[2], ampm1);
121 
122         ampm2 = (t2[1] >= 12) ? "PM" : "AM";
123         hour2 = t2[1] % 12; if (hour2 == 0) hour2 = 12;
124         end_time = sprintf("%02d:%02d %s", hour2, t2[2], ampm2);
125 
126         split($12, description, " ");
127         if (description[2] == "Лб"){
128             counter += 0.5
129         }
130         else{
131             counter++;
132         }
133 
134         line = sprintf("\"%s #%d\",\"%s\",\"%s\",\"%s\",\"%s\"", subject, counter, start_date, start_time, end_time, desc);
135         print line >> outFile;
136         if (quiet == 0) print line;
137         
138     }
139 }
140 ' fixed_file.csv
141 
142 
143 echo -e "\nФайл збережено: $outFile"
144 
145 rm -f temp_group_file.csv
146 rm -f fixed_file.csv
