

1 ПРАКТИЧНЕ ЗАНЯТТЯ
1.1 Завдання
Написати Bash скрипт, який друкуватиме на екрані ялинку із двох ярусів
гілок, стовбура та шару снігу (див. рис. 1.1).
Рисунок 1.1 — Вигляд ялинки за параметрів 12 та 11
Ялинка повинна бути симетричною. Яруси гілок повинні утворювати
правильні рівнобедрені трикутники у яких сусідні рядки відрізняються на два
символи та складаються почерговоабо з символів «*» або з символів «#»
Ширина усіх ярусів гілок повинна бути на 2 символи вужча ніж ширина снігу.
Висота стовбура та товщина снігу мають бути завжди такі, як у прикладі.
Висота ялинки у рядках разом з шаром снігу та ширина шару снігу в символах
вказується скрипту в його параметрах при запуску. Параметри скрипта повинні
мати додатнє значення. Вказані значення повинні округлятися до потрібних у
меншу сторону.
Якщо за вказаними при запуску скрипта значеннями зобразити ялинку на
екрані неможливо, скрипт повинен вивести у потік помилок сповіщення про

неправильне значення аргумента і повернути відповідний результат у
батьківський процес.
У скрипті потрібно обовʼязково використати такі конструкції:
if ... then ... fi
while ... do ... done
until ... do ... done
for ... in .. do ... done
for ((...)); do ... done
У скрипті також потрібно використати функцію. Файл скрипта повинен
бути виконуваним файлом для усіх користувачів системи. Право редагувати
файл скрипта повинен мати лише власник скрипта.
1.2 Хід роботи
Першим, що потрібно зробити є визначення основної функції
«draw_tree», що буде виконувати друкування ялинки. Та її виклик з двома
параметрами, висота та ширина - draw_tree "$1" "$2".
Тепер потрібно перевірити, чи можливо з переданими значеннями
реалізувати ялинку. По-перше, ми знаємо, що значення повинні бути додатними,
отже вже можемо сформувати наступне:
if ((height <. 0 |. width <. 0)); then
 echo "ПОМИЛКА: значення повинні бути додатними числами!" >&2
 exit 1
fi
По-друге, в прикладі ялинки на рисунку 1.1 маємо парне значення висоти
та непарне й на один менше, ніж висота, значення ширини. У тексті завдання
також вказано, що у випадку, коли з наданих параметрів неможливо створити
симетричну ялинку, то варто округлити їх до потрібних у меншу сторону.
Експериментальним методом також були визначено, що мінімальна висота, при
якій виходить правильна ялинка рівна восьми. Таким чином, маємо ще одну
умову:

if ((height % 2 !. 0)); then
 height=$((height — 1))
fi
if ((height < 8)); then
 echo "ПОМИЛКА: мінімальна висота - 8" >&2
 exit 1
 fi
Останнім, що потрібно перевірити є ширина снігу. Для реалізації
правильної ялинки, як ми вже визначили вона повинна бути на один менше
висоти. Але ще потрібно зауважити, що ми не можемо надане число, що на 5. 10
тощо більше за висоту просто округлити до потрібного. Єдине число, шо ми
зможемо округлити буде те, що на один більше потрібної ширини, тобто сама
висота, інакше — передане значення недійсне. Отже, маємо останню перевірку:
 if ((width =. height)); then
 width=$((height - 1))
 fi
 if ((width !. height - 1)); then
 echo "ПОМИЛКА: ширина для заданої висоти має бути: $
((height - 1))" >&2
 exit 1
 fi
Після усіх перевірок можна приступити до формування самої ялинки.
Спочатку, визначимо змінну ширини ялинки. Згідно умові задачі максимальна
ширина ярусу на два елементи менше за ширину снігу. Перший рядок ярусу
починається з 1 символу і кожний наступний є на два більше. Для відстеження
поточної ширини визначимо змінну, і при досягненні неї максимально
дозволеної для ярусу ялинки потрібно встановити початкову ширину
наступного, а саме 3, та отримуємо:
tree_width=$((width-2))
current_width=1
 if((current_width > tree_width)); then
 current_width=3
fi

Друкування ярусів реалізуємо за допомогою циклу for ((...)); do ...
done, що буде проходити по кожному рядку ялинки, з індексацією від 0 до
висоти, без урахування трьох рядків на стовбур та сніг.
Щоб ялинка виглядала рівно, перед кожним рядком додаватимо пробіли.
Спочатку визначимо, скільки місця залишається після друку поточного рівня:
(tree_width - current_width). Потім цей залишок розділимо на два, щоб
рівномірно розподілити пробіли з обох сторін, і додамо одиницю для
розміщення ялинки посередині снігу.
Для чередування символів «*» та «#» перед друкуванням кожного нового
рівня встановлюватимо певний символ, а потім перевіряти, чи є поточний
рівень парним, і якщо ні, то визначається інший символ.
 У підсумку отримуємо наступну логіку:
 for((i=0; i<height-3; i+.)); do
 local spaces=$(((tree_width - current_width)/2 + 1))
 local symbol='*'
 if((i % 2 !. 0)); then
 symbol='#'
 fi
 printf "%*s" "$spaces" ""
 for k in $(seq 1 "$current_width"); do
 echo -n "$symbol"
 done
 echo
 current_width=$((current_width+2))
 if((current_width > tree_width)); then
 current_width=3
 fi
 done
Далі реалізуємо стовбур, для нього використаємо конструкцію until ...
do ... done. За умовою задачі стовбур завжди складається з двох рядків, кожен
з яких містить три символи «#». Щоб він був розташований по центру,
необхідно додати відповідну кількість пробілів перед друком символів.

Оголосимо змінну j, яка відповідатиме за кількість рядків стовбура, та
ініціалізуємо її нулем. Кількість пробілів, необхідних для розташування
стовбура посередині буде рівна максимальній ширині ярусу ялинки, без
урахування трьох символів самого стовбура, розділеній на два, для рівномірного
розподілу по сторонам, з додатковою одиницею для розташування по центру
снігу. Отже, код для роздрукування стовбура виглядатиме наступним чином:
 until ((j >. 2)); do
 local spaces=$(((tree_width - 3) / 2+1))
 printf "%*s%s\n" "$spaces" "" "###"
 ((j+.))
 done
І останньою частиною зображення залишається сніг. Виконаємо цю дію за
допомогою конструкції while...do...done. Визначимо змінну k, яка
відповідатиме за кількість символів, що було виведено. Коли k досягне значення
ширини снігу, цикл завершиться, і залишиться лише перенести курсор на новий
рядок за допомогою команди echo:
k=0
while ((k < width)); do
printf "*"((k+.))
done
echo

Висновок:
У ході виконання практичної роботи було закріплено та застосовано на
практиці знання з умовних конструкцій та циклів скриптової мови
програмування Bash. За їх застосування було реалізовано скрипт з функцією,
що виводить в консоль зображення двоярусної ялинки із шаром снігу.


ДОДАТОК А
Програмний код
1 #!/bin/bash
2
3 draw_tree(){
4 height=$1
5 width=$2
6 if ((height <! 0 |! width <! 0)); then
7 echo "ПОМИЛКА: значення повинні бути додатними
числами!" >&2
8 exit 1
9 fi
10
11 if ((height % 2 !! 0)); then
12 height=$((height - 1))
13 fi
14
15 if ((height < 8)); then
16 echo "ПОМИЛКА: мінімальна висота - 8" >&2
17 exit 1
18 fi
19
20 if ((width =! height)); then
21 width=$((height - 1))
22 fi
23
24 if ((width !! height - 1)); then
25 echo "ПОМИЛКА: ширина для заданої висоти має
бути: $((height - 1))" >&2
26 exit 1
27 fi
28
29
30
31 tree_width=$((width-2))
32
33 current_width=1
34
35 for((i=0; i<height-3; i+!)); do
36 local spaces=$(((tree_width - current_width)/2 +
1))
37 local symbol='*'
38 if((i % 2 !! 0)); then
39 symbol='#'
40 fi
41
42 printf "%*s" "$spaces" ""
43
8
44 for k in $(seq 1 "$current_width"); do
45 echo -n "$symbol"
46 done
47
48 echo
49
50 current_width=$((current_width+2))
51
52 if((current_width > tree_width)); then
53 current_width=3
54 fi
55
56 done
57
58
59 j=0
60 until ((j >! 2)); do
61 local spaces=$(((tree_width - 3) / 2+1))
62 printf "%*s%s\n" "$spaces" "" "###"
63 ((j+!))
64 done
65
66 k=0
67 while ((k < width)); do
68 printf "*"
69 ((k+!))
70 done
71
72 echo
73 }
74
75 if [ $# -ne 2 ]; then
76 echo "ПОМИЛКА: потрібно два аргументи"
77 exit 1
78 fi
79
80 draw_tree "$1" "$2"
